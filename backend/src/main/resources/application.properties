# -------------------------------- JWT Tokens -------------------------------- #
jwt.signing.key.secret=porn
jwt.get.token.uri=/authenticate
jwt.refresh.token.uri=/refresh
jwt.http.request.header=Authorization
jwt.token.expiration.in.seconds=604800

# ------------------------ Local Development Database ------------------------ #
# Showing SQL Queries in the Sever Console
spring.jpa.show-sql=true
# Enable the Local Database Storage
spring.h2.console.enabled=true
# Create a File called "database" for Persistence
spring.datasource.url=jdbc:h2:file:./src/main/resources/database;DB_CLOSE_ON_EXIT=FALSE
# Just a temporary Username and Password for the Local Storage
spring.datasource.username=root
spring.datasource.password=root
# Any Entity Class will self create Schema
spring.jpa.hibernate.ddl-auto=update

# ------------------------ Live Development Database ------------------------- #
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:<port>/<db_name>?useSSL=false #Google Cloud Proxy
#spring.datasource.username=<Google Cloud User in Database>
#spring.datasource.password=<Google Cloud User Password in Database>

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

# ---------------------------- SMTP Mail Service ----------------------------- #
# Source: https://mkyong.com/spring-boot/spring-boot-how-to-send-email-via-smtp/
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=
spring.mail.password=

# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=10000
spring.mail.properties.mail.smtp.timeout=10000
spring.mail.properties.mail.smtp.writetimeout=10000

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com